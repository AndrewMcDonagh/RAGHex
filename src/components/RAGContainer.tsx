
import { useState } from "react";
import { Button } from "@/components/ui/button";
import FileUploader from "./FileUploader";
import DocumentList from "./DocumentList";
import ChatInput from "./ChatInput";
import MessageList, { MessageType } from "./MessageList";
import { useToast } from "@/components/ui/use-toast";
import { v4 as uuidv4 } from "uuid";
import { Search, FileText } from "lucide-react";

const RAGContainer = () => {
  const [files, setFiles] = useState<File[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [isReady, setIsReady] = useState(false);
  const [messages, setMessages] = useState<MessageType[]>([]);
  const [isAnswering, setIsAnswering] = useState(false);
  const { toast } = useToast();

  const handleFilesUpload = (newFiles: File[]) => {
    setFiles((prevFiles) => [...prevFiles, ...newFiles]);
  };

  const handleRemoveFile = (index: number) => {
    setFiles((prevFiles) => {
      const newFiles = [...prevFiles];
      newFiles.splice(index, 1);
      if (newFiles.length === 0) {
        setIsReady(false);
      }
      return newFiles;
    });
  };

  const processFiles = () => {
    if (files.length === 0) {
      toast({
        title: "No files uploaded",
        description: "Please upload at least one file to process.",
        variant: "destructive",
      });
      return;
    }

    setIsProcessing(true);

    // Simulate processing documents
    setTimeout(() => {
      setIsProcessing(false);
      setIsReady(true);
      toast({
        title: "Documents processed",
        description: `Successfully processed ${files.length} document${files.length > 1 ? 's' : ''}.`,
      });
    }, 2000);

    // In a real implementation, you would send the files to your backend here
    // and process them to create embeddings for your RAG system
  };

  const handleSendMessage = (content: string) => {
    const userMessage: MessageType = {
      id: uuidv4(),
      content,
      role: "user",
      timestamp: new Date(),
    };

    setMessages((prevMessages) => [...prevMessages, userMessage]);
    setIsAnswering(true);

    // Simulate AI response delay
    setTimeout(() => {
      const aiMessage: MessageType = {
        id: uuidv4(),
        content: generateDummyResponse(content),
        role: "assistant",
        timestamp: new Date(),
      };
      setMessages((prevMessages) => [...prevMessages, aiMessage]);
      setIsAnswering(false);
    }, 1500);

    // In a real implementation, you would send the user's question to your RAG system here
    // and get a response based on the uploaded documents
  };

  // Helper function to generate dummy responses
  const generateDummyResponse = (question: string): string => {
    // This would be replaced with actual RAG logic in a real implementation
    const responses = [
      "Based on the documents you've uploaded, I found that...",
      "The information in your documents suggests that...",
      "According to the data in your files...",
      "After analyzing your documents, I can tell you that...",
      "The documents you provided indicate that...",
    ];
    
    return `${responses[Math.floor(Math.random() * responses.length)]} This is a simulated response to your question: "${question}". In a real implementation, this would be generated by searching through your documents for the most relevant information.`;
  };

  return (
    <div className="flex flex-col md:flex-row w-full h-[calc(100vh-2rem)] gap-6">
      {/* Document Upload Panel */}
      <div className="w-full md:w-1/3 bg-white p-6 rounded-lg shadow-sm border overflow-y-auto">
        <h2 className="text-xl font-bold mb-4">Document Import</h2>
        <FileUploader onFilesUpload={handleFilesUpload} isLoading={isProcessing} />
        
        <DocumentList 
          files={files} 
          onRemoveFile={handleRemoveFile} 
          isProcessing={isProcessing} 
        />
        
        {files.length > 0 && !isReady && (
          <Button 
            onClick={processFiles} 
            className="w-full mt-4 bg-rag-purple hover:bg-rag-purple-dark" 
            disabled={isProcessing}
          >
            {isProcessing ? "Processing..." : "Process Documents"}
          </Button>
        )}
      </div>

      {/* Chat Interface Panel */}
      <div className="w-full md:w-2/3 flex flex-col bg-white p-6 rounded-lg shadow-sm border">
        <h2 className="text-xl font-bold mb-4">Ask Questions</h2>
        
        {isReady ? (
          <div className="flex flex-col h-full">
            <div className="flex-1 overflow-hidden">
              {messages.length === 0 ? (
                <div className="h-full flex flex-col items-center justify-center text-center p-6">
                  <div className="bg-rag-blue/10 p-4 rounded-full mb-4">
                    <Search className="h-8 w-8 text-rag-blue" />
                  </div>
                  <h3 className="text-xl font-semibold mb-2">Ask about your documents</h3>
                  <p className="text-gray-500 max-w-md">
                    Your documents have been processed. You can now ask questions about their content.
                  </p>
                </div>
              ) : (
                <MessageList messages={messages} loading={isAnswering} />
              )}
            </div>
            
            <div className="pt-4 border-t mt-auto">
              <ChatInput onSend={handleSendMessage} disabled={isAnswering} />
            </div>
          </div>
        ) : (
          <div className="h-full flex flex-col items-center justify-center text-center p-6">
            <div className="bg-gray-100 p-4 rounded-full mb-4">
              <FileText className="h-8 w-8 text-gray-400" />
            </div>
            <h3 className="text-xl font-semibold mb-2">No documents processed yet</h3>
            <p className="text-gray-500 max-w-md">
              Upload and process documents to start asking questions about their content.
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default RAGContainer;
