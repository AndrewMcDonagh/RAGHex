import { useState } from "react";
import { Button } from "@/components/ui/button";
import FileUploader from "./FileUploader";
import DocumentList from "./DocumentList";
import ChatInput from "./ChatInput";
import MessageList, { MessageType } from "./MessageList";
import { useToast } from "@/components/ui/use-toast";
import { v4 as uuidv4 } from "uuid";
import { Search, FileText } from "lucide-react";

const RAGContainer = () => {
  const [files, setFiles] = useState<File[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [isReady, setIsReady] = useState(false);
  const [messages, setMessages] = useState<MessageType[]>([]);
  const [isAnswering, setIsAnswering] = useState(false);
  const { toast } = useToast();

  const handleFilesUpload = (newFiles: File[]) => {
    setFiles((prevFiles) => [...prevFiles, ...newFiles]);
  };

  const handleRemoveFile = (index: number) => {
    setFiles((prevFiles) => {
      const newFiles = [...prevFiles];
      newFiles.splice(index, 1);
      if (newFiles.length === 0) {
        setIsReady(false);
      }
      return newFiles;
    });
  };

  const processFiles = () => {
    if (files.length === 0) {
      toast({
        title: "No files uploaded",
        description: "Please upload at least one file to process.",
        variant: "destructive",
      });
      return;
    }

    setIsProcessing(true);

    // Simulate processing documents
    setTimeout(() => {
      setIsProcessing(false);
      setIsReady(true);
      toast({
        title: "Documents processed",
        description: `Successfully processed ${files.length} document${files.length > 1 ? 's' : ''}.`,
      });
    }, 2000);

    // In a real implementation, you would send the files to your backend here
    // and process them to create embeddings for your RAG system
  };

  const handleSendMessage = (content: string) => {
    const userMessage: MessageType = {
      id: uuidv4(),
      content,
      role: "user",
      timestamp: new Date(),
    };

    setMessages((prevMessages) => [...prevMessages, userMessage]);
    setIsAnswering(true);

    // Simulate AI response delay
    setTimeout(() => {
      const aiMessage: MessageType = {
        id: uuidv4(),
        content: generateDummyResponse(content),
        role: "assistant",
        timestamp: new Date(),
      };
      setMessages((prevMessages) => [...prevMessages, aiMessage]);
      setIsAnswering(false);
    }, 1500);

    // In a real implementation, you would send the user's question to your RAG system here
    // and get a response based on the uploaded documents
  };

  // Helper function to generate dummy responses
  const generateDummyResponse = (question: string): string => {
    // This would be replaced with actual RAG logic in a real implementation
    const responses = [
      "Based on the documents you've uploaded, I found that...",
      "The information in your documents suggests that...",
      "According to the data in your files...",
      "After analyzing your documents, I can tell you that...",
      "The documents you provided indicate that...",
    ];
    
    return `${responses[Math.floor(Math.random() * responses.length)]} This is a simulated response to your question: "${question}". In a real implementation, this would be generated by searching through your documents for the most relevant information.`;
  };

  return (
    <div className="w-full bg-white rounded-lg shadow-sm border p-6">
      <h1 className="text-2xl font-bold text-[#1EAEDB] text-center mb-6">Hexagon RAG System</h1>
      
      <div className="grid grid-cols-1 gap-6">
        {/* Files Section - Simplified and integrated */}
        {!isReady && (
          <div className="w-full mx-auto max-w-xl">
            <h2 className="text-sm font-bold text-[#33C3F0] mb-2">Import Files</h2>
            <FileUploader onFilesUpload={handleFilesUpload} isLoading={isProcessing} />
            
            <DocumentList 
              files={files} 
              onRemoveFile={handleRemoveFile} 
              isProcessing={isProcessing} 
            />
            
            {files.length > 0 && (
              <Button 
                onClick={processFiles} 
                className="w-full mt-4 bg-[#1EAEDB] hover:bg-[#0FA0CE]" 
                disabled={isProcessing}
              >
                {isProcessing ? "Processing..." : "Process Documents"}
              </Button>
            )}
          </div>
        )}

        {/* Chat Interface */}
        <div className="w-full mx-auto max-w-3xl">
          <div className="flex flex-col h-[calc(100vh-300px)]">
            <div className="flex-1 overflow-hidden">
              {isReady ? (
                messages.length === 0 ? (
                  <div className="h-full flex flex-col items-center justify-center text-center p-6">
                    <div className="bg-[#F2FCE2] p-4 rounded-full mb-4">
                      <Search className="h-8 w-8 text-[#1EAEDB]" />
                    </div>
                    <h3 className="text-xl font-semibold mb-2 text-[#1EAEDB]">Ask about your documents</h3>
                    <p className="text-gray-500 max-w-md">
                      Your documents have been processed. You can now ask questions about their content.
                    </p>
                  </div>
                ) : (
                  <MessageList messages={messages} loading={isAnswering} />
                )
              ) : (
                <div className="h-full flex flex-col items-center justify-center text-center p-6">
                  <div className="bg-[#F2FCE2] p-4 rounded-full mb-4">
                    <FileText className="h-8 w-8 text-[#1EAEDB]" />
                  </div>
                  <h3 className="text-xl font-semibold mb-2 text-[#1EAEDB]">No documents processed yet</h3>
                  <p className="text-gray-500 max-w-md">
                    Upload and process documents to start asking questions about their content.
                  </p>
                </div>
              )}
            </div>
            
            {isReady && (
              <div className="pt-4 border-t mt-auto">
                <ChatInput onSend={handleSendMessage} disabled={isAnswering} />
              </div>
            )}
          </div>
        </div>
        
        {/* Team attribution */}
        <div className="text-xs text-gray-400 text-center mt-4">
          <p>Built by Reed Ramirez, Andrew McDonagh, Scott Cheung, and Ibrahima Ka</p>
        </div>
      </div>
    </div>
  );
};

export default RAGContainer;
